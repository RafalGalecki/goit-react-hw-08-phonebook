{"version":3,"file":"static/js/384.d2d71686.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-07-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-07-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/filter/selectors.js","webpack://goit-react-hw-07-phonebook/./src/components/ContactslistElement/ContactsListElement.module.css?74d1","components/ContactslistElement/ContactsListElement.jsx","webpack://goit-react-hw-07-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","pages/Phonebook/Phonebook.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"formBox\":\"ContactForm_formBox__cXiHe\",\"labelled\":\"ContactForm_labelled__4AQPz\",\"inputName\":\"ContactForm_inputName__a8jFO\",\"label\":\"ContactForm_label__-cVXI\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport { Notify } from 'notiflix';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    let isContact;\n    contacts.forEach(person => {\n      if (form.name.value.toLowerCase() === person.name.toLowerCase()) {\n        isContact = true;\n      }\n    });\n    if (isContact) {\n      Notify.warning(`${form.name.value} is already in your Contacts.`, {\n        backgroundColor: '#FF1493',\n        timeout: 3000,\n        position: 'left-top',\n      });\n    }\n    if (!isContact) {\n      dispatch(\n        addContact({\n          name: form.name.value,\n          number: form.number.value,\n        })\n      );\n      Notify.success(`${form.name.value} has been added to your Contacts.`, {\n        timeout: 3000,\n        position: 'left-top',\n        background: '#FF1493',\n      });\n    }\n    form.reset();\n  };\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  return (\n    <form className={css.formBox} onSubmit={handleSubmit}>\n      <div className={css.labelled}>\n        <label className={css.label} htmlFor={nameInputId}>\n          Name\n        </label>\n        <input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          className={css.inputName}\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я\\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]+(([' \\-][a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C])?[a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n      <div className={css.labelled}>\n        <label className={css.label} htmlFor={numberInputId}>\n          Number\n        </label>\n        <input\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          className={css.inputName}\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n      <button type=\"submit\" className={css.btn} name=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"inputFilter\":\"Filter_inputFilter__8QMOp\",\"labelled\":\"Filter_labelled__pfixk\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <div className={css.labelled} >\n        <label htmlFor={filterId}>Find contacts</label>\n        <input\n          className={css.inputFilter}\n          id={filterId}\n          type=\"search\"\n          placeholder=\"Enter name\"\n          onChange={event => handleChange(event)}\n        ></input>\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return [...contacts].sort((a, b) => { return a.name.localeCompare(b.name) }).filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"contactLi\":\"ContactsListElement_contactLi__fsEDQ\",\"contact\":\"ContactsListElement_contact__8RVfB\",\"btnDelete\":\"ContactsListElement_btnDelete__RZfFE\"};","import React from 'react';\nimport css from './ContactsListElement.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\n\nconst ContactsListElement = ({ contact }) => {\n  const dispatch = useDispatch();\n  function getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  }\n\n  const handleClick = () => {\n    Notiflix.Confirm.show(\n      'Please confirm',\n      `Are you sure to delete ${contact.name}?`,\n      'Yes',\n      'No',\n      function okCb() {\n        dispatch(deleteContact(contact.id));\n      }\n    );\n  };\n\n  return (\n    <div\n      className={css.contactLi}\n      // style={{ color: getRandomHexColor(), textShadow: '1px 1px black' }}\n    >\n      <p className={css.contact}>\n        <span\n          style={{ color: getRandomHexColor(), textShadow: '1px 1px black' }}\n        >\n          &#10047;\n        </span>{' '}\n        {contact.name}:\n      </p>\n      <p className={css.contact}>{contact.number}</p>\n      <button type=\"button\" className={css.btnDelete} onClick={handleClick}>\n        &#9760;\n      </button>\n    </div>\n  );\n};\n\nContactsListElement.propTypes = {\n  contact: PropTypes.object,\n};\n\nexport default ContactsListElement;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__ZQI1L\",\"title\":\"ContactsList_title__Nc-fb\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from '../../redux/contacts/selectors.js';\nimport { selectFilteredContacts } from 'redux/filter/selectors.js';\nimport ContactsListElement from '../ContactslistElement/ContactsListElement';\nimport css from './ContactsList.module.css';\n\nconst ContactsList = () => {\n  const items = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <div className={css.contactsListBox}>\n      <h4 className={css.title}>\n        You have {items.length} contact{items.length === 1 ? null : 's'}\n      </h4>\n      <ul className={css.contactsList}>\n        {!!isLoading && <b>Loading contacts...</b>}\n        {!!items &&\n          items.map(contact => (\n            <li key={contact.id}>\n              <ContactsListElement contact={contact} />\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { selectError } from 'redux/contacts/selectors';\n//import css from './Phonebook.module.css';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <ContactsList />\n      {!!isLoading && !error && <b>Request in progress...</b>}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","dispatch","useDispatch","useSelector","nameInputId","nanoid","numberInputId","className","css","onSubmit","event","preventDefault","isContact","form","target","forEach","person","name","value","toLowerCase","Notify","backgroundColor","timeout","position","addContact","number","background","reset","htmlFor","id","type","placeholder","pattern","title","required","filterId","onChange","setFilter","currentTarget","handleChange","selectFilteredContacts","createSelector","filter","sort","a","b","localeCompare","contact","includes","style","color","Math","floor","random","toString","textShadow","onClick","Notiflix","deleteContact","length","map","Phonebook","useEffect","fetchContacts"],"sourceRoot":""}