{"version":3,"file":"static/js/174.126854af.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/filter/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactslistElement/ContactsListElement.module.css?74d1","components/ContactslistElement/ContactsListElement.jsx","components/ScrollButton/ScrollButton.styled.js","components/ScrollButton/ScrollButton.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","pages/Phonebook/Phonebook.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"formBox\":\"ContactForm_formBox__cXiHe\",\"labelled\":\"ContactForm_labelled__4AQPz\",\"inputName\":\"ContactForm_inputName__a8jFO\",\"label\":\"ContactForm_label__-cVXI\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport { doubledContactNotification, addedContactNotification } from 'utils/notifications';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    let isContact;\n    contacts.forEach(person => {\n      if (form.name.value.toLowerCase() === person.name.toLowerCase()) {\n        isContact = true;\n      }\n    });\n    if (isContact) {\n      doubledContactNotification(form.name.value);\n    }\n    if (!isContact) {\n      dispatch(\n        addContact({\n          name: form.name.value,\n          number: form.number.value,\n        })\n      );\n      addedContactNotification(form.name.value);\n    }\n    form.reset();\n  };\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  return (\n    <form className={css.formBox} onSubmit={handleSubmit}>\n      <div className={css.labelled}>\n        <label className={css.label} htmlFor={nameInputId}>\n          Name\n        </label>\n        <input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          className={css.inputName}\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я\\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]+(([' \\-][a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C])?[a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n      <div className={css.labelled}>\n        <label className={css.label} htmlFor={numberInputId}>\n          Number\n        </label>\n        <input\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          className={css.inputName}\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n      <button type=\"submit\" className={css.btn} name=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"inputFilter\":\"Filter_inputFilter__8QMOp\",\"labelled\":\"Filter_labelled__pfixk\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <div className={css.labelled} >\n        <label htmlFor={filterId}>Find contacts</label>\n        <input\n          className={css.inputFilter}\n          id={filterId}\n          type=\"search\"\n          placeholder=\"Enter name\"\n          onChange={event => handleChange(event)}\n        ></input>\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return [...contacts].sort((a, b) => { return a.name.localeCompare(b.name) }).filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"contactLi\":\"ContactsListElement_contactLi__fsEDQ\",\"contact\":\"ContactsListElement_contact__8RVfB\",\"btnDelete\":\"ContactsListElement_btnDelete__RZfFE\"};","import React from 'react';\nimport css from './ContactsListElement.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport { FaSkullCrossbones } from 'react-icons/fa';\n\nconst ContactsListElement = ({ contact }) => {\n  const dispatch = useDispatch();\n  function getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  }\n\n  const handleClick = () => {\n    Notiflix.Confirm.show(\n      'Please confirm',\n      `Are you sure to delete ${contact.name}?`,\n      'Yes',\n      'No',\n      function okCb() {\n        dispatch(deleteContact(contact.id));\n      }\n    );\n  };\n\n  return (\n    <div className={css.contactLi}>\n      <p className={css.contact}>\n        <span\n          style={{ color: getRandomHexColor(), textShadow: '1px 1px black' }}\n        >\n          &#10047;\n        </span>{' '}\n        {contact.name}:\n      </p>\n      <p className={css.contact}>{contact.number}</p>\n      <button type=\"button\" className={css.btnDelete} onClick={handleClick}>\n        <FaSkullCrossbones />\n      </button>\n    </div>\n  );\n};\n\nContactsListElement.propTypes = {\n  contact: PropTypes.object,\n};\n\nexport default ContactsListElement;\n","import styled from 'styled-components';\n\nexport const Button = styled.div`\n  position: fixed;\n  width: 100%;\n  left: 50%;\n  bottom: 40px;\n  height: 20px;\n  font-size: 3rem;\n  z-index: 25;\n  cursor: pointer;\n  color: rgba(55, 0, 201, 0.5);\n`;\n","import React, { useState } from 'react';\nimport { FaArrowCircleUp } from 'react-icons/fa';\nimport { Button } from './ScrollButton.styled';\n\nconst ScrollButton = () => {\n  const [visible, setVisible] = useState(false);\n\n  const toggleVisible = () => {\n    const scrolled = document.documentElement.scrollTop;\n    if (scrolled > 100) {\n      setVisible(true);\n    } else if (scrolled <= 100) {\n      setVisible(false);\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  window.addEventListener('scroll', toggleVisible);\n\n  return (\n    <Button>\n      <FaArrowCircleUp\n        onClick={scrollToTop}\n        style={{ display: visible ? 'inline' : 'none' }}\n      />\n    </Button>\n  );\n};\n\nexport default ScrollButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__ZQI1L\",\"title\":\"ContactsList_title__Nc-fb\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from '../../redux/contacts/selectors.js';\nimport { selectFilteredContacts } from 'redux/filter/selectors.js';\nimport Loader from 'components/Loader/Loader.js';\nimport ContactsListElement from '../ContactslistElement/ContactsListElement';\nimport ScrollButton from 'components/ScrollButton/ScrollButton.jsx';\nimport css from './ContactsList.module.css';\n\nconst ContactsList = () => {\n  const items = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <div className={css.contactsListBox}>\n      <h4 className={css.title}>\n        You have {items.length} contact{items.length === 1 ? null : 's'}\n      </h4>\n      <ul className={css.contactsList}>\n        {!!isLoading && <Loader />}\n        {!!items &&\n          items.map(contact => (\n            <li key={contact.id}>\n              <ContactsListElement contact={contact} />\n            </li>\n          ))}\n        <ScrollButton />\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { selectError } from 'redux/contacts/selectors';\nimport Loader from 'components/Loader/Loader';\n//import css from './Phonebook.module.css';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <ContactsList />\n      {!!isLoading && !error && <Loader />}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","dispatch","useDispatch","useSelector","nameInputId","nanoid","numberInputId","className","css","onSubmit","event","preventDefault","isContact","form","target","forEach","person","name","value","toLowerCase","doubledContactNotification","addContact","number","addedContactNotification","reset","htmlFor","id","type","placeholder","pattern","title","required","filterId","onChange","setFilter","currentTarget","handleChange","selectFilteredContacts","createSelector","filter","sort","a","b","localeCompare","contact","includes","style","color","Math","floor","random","toString","textShadow","onClick","Notiflix","deleteContact","Button","styled","useState","visible","setVisible","window","addEventListener","scrolled","document","documentElement","scrollTop","scrollTo","top","behavior","display","length","Loader","map","Phonebook","useEffect","fetchContacts"],"sourceRoot":""}